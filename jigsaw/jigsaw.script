local HELPER = require "jigsaw.helper"
local T = require "jigsaw.template"
local ZSTEP = 0.0000001
local ROTATION = 0.2
local DISPERSION = 120

local function get_id(col, row)
	return go.get_id("part_" .. col .. "_" .. row)
end
	
function init(self)
	msg.post(".", "acquire_input_focus")
	self.z = 0
	self.offset = vmath.vector3(0,0,0)
	self.children = {}
	self.parent = nil

	math.randomseed(os.time())

	local w = sys.get_config("display.width")
	local h = sys.get_config("display.height")

	local positions = {}

	self.groups = {}
	for col = 1, #T.cells do
		for row = 1, #T.cells[col] do
			local id = get_id(col, row)
			table.insert(self.groups, {id})

			--random rotation & position --------------
			local a = math.random(0, 359)
			go.set(id, "euler.z", a)
			
			while true do
				local x = math.random(30, w - 30)
				local y = math.random(30, h - 30)
				local p = vmath.vector3(x, y, self.z)
				local isValid = true
				for _, v in ipairs(positions) do
					if vmath.length(v - p) < DISPERSION then
						isValid = false
						break
					end
				end
				if isValid then
					go.set_position(p, id)
					table.insert(positions, p)
					self.z = self.z + ZSTEP
					break
				end
			end
			----------------------------------------
		end
	end
end

local function find_group(self, id)
	for i, g in ipairs(self.groups) do
		for _, part in ipairs(g) do
			if part == id then
				return g, i
			end
		end
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.parent then -- we wait until next frame to set parent
		for _, id in ipairs(self.children) do
			go.set_parent(id, self.parent, true)
		end
		self.parent = nil
	end
end

local function rotate(v, pivot, angle, z)
	local a = math.rad(angle)
	local x = math.cos(a) * (v.x - pivot.x) - math.sin(a) * (v.y - pivot.y) + pivot.x
	local y = math.sin(a) * (v.x - pivot.x) + math.cos(a) * (v.y - pivot.y) + pivot.y
	return vmath.vector3(x, y, z)
end

local function find_element(self, col, row)
	if col < 1 or row < 1 or col > #T.cells or row > #T.cells[col] then
		return nil
	end
	local id = get_id(col, row)
	return id
end

local function get_cell(path)
	local url = msg.url()
	url.path = path
	url.fragment = "jigsaw_model"
	local row = go.get(url, "row")
	local col = go.get(url, "col")
	return T.cells[col][row], col, row
end

local function check(drag_center, drag_pos, drag_rotation, theta, id)
	
	--check angle
	local q = go.get_world_rotation(id)
	
	q.x = -q.x
	q.y = -q.y
	q.z = -q.z
	q = drag_rotation * q
	local a = 2 * math.acos(q.w)

	if math.abs(a) > 0.2 then
		return nil
	end

	--check position	
	local cell = get_cell(id)
	local pos = go.get_world_position(id)
	
	local center = vmath.vector3(cell.x * T.scale, cell.y * T.scale, pos.z)
	local offset = pos - center
	
	local drag_offset = drag_pos - rotate(drag_center, center, theta, drag_pos.z)

	if vmath.length(offset - drag_offset) <  T.distance * T.scale then
		return offset, center
	end
	return nil
end

local function check_connections(self)
	if not self.drag then
		return
	end
	
	local total = #self.drag
	local parent_center = nil
	local parent_offset = nil
	local rotation = go.get_world_rotation(self.drag[1])
	local parent_angle = 0
	local parent_pivot = nil
	self.children = {}
	for i = 1, total do
		local cell, col, row = get_cell(self.drag[i])
		local pos = go.get_world_position(self.drag[i])
		local center = vmath.vector3(cell.x * T.scale, cell.y * T.scale, pos.z)

		if i == 1 then
			parent_center = center
		end

		local coord_offsets = {{col - 1, row}, {col + 1, row}, {col, row + 1}, {col, row - 1}}
		for _, coord in ipairs(coord_offsets) do
			local other = find_element(self, coord[1], coord[2])
			if other then
				local g, idx = find_group(self, other)
				local theta = go.get(g[1], "euler.z")
				local offset, pivot = check(center, pos, rotation, theta, other)
				
				if offset and g ~= self.drag then
					self.parent = self.drag[1]
					if parent_offset then
						cell  = get_cell(g[1])
						local other_center = vmath.vector3(cell.x * T.scale, cell.y * T.scale, pos.z)
						local fixed = rotate(other_center, parent_pivot, parent_angle, other_center.z)
						go.set_position(fixed + parent_offset, g[1])
						go.set(g[1], "euler.z", parent_angle)
					else			
						local fixed = rotate(parent_center, pivot, theta, parent_center.z)
						go.set_position(fixed + offset, self.drag[1])
						parent_offset = offset
						parent_pivot = pivot
						parent_angle = theta
						go.set(self.drag[1], "euler.z", parent_angle)			
					end
		
					for j, part in ipairs(g) do
						table.insert(self.drag, part)
						table.insert(self.children, part) --set parent on next frame
						local p = go.get_position(part)
						p.z = j == 1 and 1 or 0
						go.set_position(p, part)
					end
					table.remove(self.groups, idx)
				end
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") and message.enter then
		go.set_position(vmath.vector3(-10000, -10000, 0))
		if (self.touch or self.rotate) and not self.drag then
			self.drag = find_group(self, message.other_id)
			self.z = self.z + ZSTEP
			local pos = go.get_position(self.drag[1])
			pos.z = 1
			self.offset = self.cursor - pos
			go.set_position(pos, self.drag[1])
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		self.cursor = HELPER.screen_to_world(action)
		go.set_position(self.cursor)
		self.touch = true
	elseif action_id == hash("rmb") and action.pressed then
		self.cursor = HELPER.screen_to_world(action)
		go.set_position(self.cursor)
		self.rotate = true
	elseif action_id == nil and self.rotate and self.drag then
		local d = math.abs(action.dx) > math.abs(action.dy) and action.dx or action.dy
		local a = go.get(self.drag[1], "euler.z") + d * ROTATION
		
		go.set(self.drag[1], "euler.z", a)

	elseif action_id == nil and self.touch and self.drag then
		local p = HELPER.screen_to_world(action)
		go.set_position(p - self.offset, self.drag[1])
	
	elseif action_id == hash("touch") and action.released then
		if self.drag then
			local pos = go.get_position(self.drag[1])
			pos.z = self.z
			go.set_position(pos, self.drag[1])
			check_connections(self)
			self.drag = nil
		end
		self.touch = false
	elseif action_id == hash("rmb") and action.released then
		self.rotate = false
		check_connections(self)
		self.drag = nil
	end
end
